@page "/words"
@inject WordService WordService
@inject IPersistencer<PersistentStateContainer> Persistencer
@implements IDisposable
<Animate Animation="Animations.Fade" class="animation-wrapper">
    <div class="wrapper">
        @if (_pager == null)
        {
            <div class="loading">
                <Loader />
            </div>
        }
        else
        {
            <div class="contents">
                <WordCard IsAlwaysShow="true" Word="@_pager.CurrentValue" />
            </div>
        }
        <div class="actions">
            <button class="btn" disabled=@(_pager?.CanGoPrevious() != true) @onclick=@GoPrevious>前へ</button>
            <button class="btn" disabled=@(_pager?.CanGoNext() != true) @onclick=@GoNext>次へ</button>
        </div>
    </div>
</Animate>
@code {
    private ItemPager<WordDTO>? _pager;
    private PersistentStateContainer _container;
    protected override async Task OnInitializedAsync()
    {
        var results = await WordService.GetWordsAsync();
        _pager = new ItemPager<WordDTO>(results);
        _container = await Persistencer.GetAsync(PersistentType.Word);
        _pager.Move(_container.WordCurrentIndex);
    }

    private void GoNext()
    {
        if (_pager?.CanGoNext() == true)
        {
            _pager.GoNext();
        }
    }

    private void GoPrevious()
    {
        if (_pager?.CanGoPrevious() == true)
        {
            _pager.GoPrevious();
        }
    }

    public async void Dispose()
    {
        _container.WordCurrentIndex = _pager?.CurrentIndex ?? 0;
        await Persistencer.SaveAsync(PersistentType.Word, _container);
    }
}