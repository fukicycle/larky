@page "/words"
@implements IDisposable
<Animate Animation="Animations.Fade" class="animation-wrapper">
    <div class="wrapper">
        @if (pager == null)
        {
            <div class="loading">
                <Loader />
            </div>
        }
        else
        {
            <div class="contents">
                <WordCard IsAlwaysShow="true" Word="@pager.CurrentValue" />
            </div>
        }
        <div class="actions">
            <button class="btn" disabled=@(pager?.CanGoPrevious() != true) @onclick=@GoPrevious>前へ</button>
            <button class="btn" disabled=@(pager?.CanGoNext() != true) @onclick=@GoNext>次へ</button>
        </div>
    </div>
</Animate>
@code {
    [Inject]
    public WordService WordService { get; set; } = null!;

    [Inject]
    public IPersistencer<PersistentStateContainer> Persistencer { get; set; } = null!;
    
    
    private PersistentStateContainer _container;
    private ItemPager<WordDTO>? pager { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var results = await WordService.GetWordsAsync();
        pager = new ItemPager<WordDTO>(results);
        _container = await Persistencer.GetAsync(PersistentType.Word);
        pager.Move(_container.WordCurrentIndex);
    }

    private void GoNext()
    {
        if (pager?.CanGoNext() == true)
        {
            pager.GoNext();
        }
    }

    private void GoPrevious()
    {
        if (pager?.CanGoPrevious() == true)
        {
            pager.GoPrevious();
        }
    }

    public async void Dispose()
    {
        _container.WordCurrentIndex = pager?.CurrentIndex ?? 0;
        await Persistencer.SaveAsync(PersistentType.Word, _container);
    }
}