@page "/study"
@inject WordService WordService
@inject IPersistencer<PersistentStateContainer> Persistencer
@implements IDisposable
<Animate Animation="Animations.FadeUp" class="animation-wrapper">
    @if (_pager == null)
    {
        <div class="loading">
            <Loader />
        </div>
    }
    else
    {
        <div class="contents">
            <div class="progress">
                <ProgressBar Current="@(_pager.CurrentValue.CurrentIndex + 1)" Total="@_pager.CurrentValue.Count" />
            </div>
            <WordCard IsAlwaysShow="false" Word="@_pager.CurrentValue.CurrentValue" />
        </div>
    }
</Animate>
@code {
    [SupplyParameterFromQuery(Name = "level")]
    public int? Level { get; set; }
    private GroupPager<WordDTO>? _pager;
    private PersistentStateContainer _container;

    protected override async Task OnInitializedAsync()
    {
        var results = await WordService.GetWordsAsync(maxLevel: Level ?? 1);
        _pager = new GroupPager<WordDTO>(results, 10);
        _container = await Persistencer.GetAsync(PersistentType.Word);
        _pager.Move(_container.StudyCurrentIndex);
    }

    public async void Dispose()
    {
        _container.StudyCurrentIndex = _pager?.CurrentIndex ?? 0;
        await Persistencer.SaveAsync(PersistentType.Word, _container);
    }
}
