@page "/study"
@implements IDisposable
<Animate Animation="Animations.Fade" class="animation-wrapper">
    @if (pager == null)
    {
        <div class="loading">
            <Loader />
        </div>
    }
    else
    {
        <div class="contents">
            <WordCard IsAlwaysShow="false" Word="@pager.CurrentValue.CurrentValue" />
        </div>
    }
</Animate>
@code {
    [Inject(Key = nameof(FirebaseScheme.Words))]
    public IRepository<WordDTO, string> WordRepository { get; set; } = null!;

    [Inject]
    public IPersistencer<PersistentStateContainer> Persistencer { get; set; } = null!;

    private PersistentStateContainer _container;
    private GroupPager<WordDTO>? pager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var results = await WordRepository.GetItemsAsync();
        pager = new GroupPager<WordDTO>(results, 10);
        _container = await Persistencer.GetAsync(PersistentType.Word);
        pager.Move(_container.WordCurrentIndex);
    }

    public async void Dispose()
    {
        _container.StudyCurrentIndex = pager?.CurrentIndex ?? 0;
        await Persistencer.SaveAsync(PersistentType.Word, _container);
    }
}